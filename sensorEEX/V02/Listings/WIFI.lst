C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE WIFI
OBJECT MODULE PLACED IN .\Objects\WIFI.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\WIFI.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEBUG OBJECTEXT
                    -END PRINT(.\Listings\WIFI.lst) TABS(2) OBJECT(.\Objects\WIFI.obj)

line level    source

   1          /****************************************Copyright (c)*********************************************
   2          **                                     佛山三俊电子有限公司
   3          **                         开   发   部
   4          **--------------文件信息---------------------------------------------------------------------------
   5          **文   件   名: WIFI.c
   6          **创   建   人: 
   7          **创 建 日 期 ：
   8          **描        述: 
   9          **--------------当前版本修订-----------------------------------------------------------------------
  10          ** 修改人: 
  11          ** 日　期: 
  12          ** 描　述: 
  13          **
  14          **************************************************************************************************/
  15          #define WIFI_GLOBALS
  16          
  17          #include "Includes.h"
  18          
  19          const  char xdata APPLY_AT[]="+++";
  20          const  char xdata APPLY_AT_ACK[]="a";
  21          
  22          const  char xdata ENT_AT[]="a";
  23          const  char xdata ENT_AT_ACK[]="+ok\r\n\r\n";
  24          
  25          //const  char xdata CMDPW_STAT[]="AT+CMDPW\r";
  26          //const  char xdata CMDPW_STAT_ACK[]="AT+CMDPW\n\r+ok=GT\r\n\r\n";
  27          
  28          //const  char xdata CMDPW_SET[]="AT+CMDPW=GT\r";
  29          //const  char xdata CMDPW_SET_ACK[]="AT+CMDPW=GT\n\r+ok\r\n\r\n";
  30          
  31          const  char xdata ENTM[]="AT+ENTM\r";
  32          const  char xdata ENTM_ACK[]="AT+ENTM\n\r+ok\r\n\r\n";
  33          
  34          const  char xdata WMAC[]="at+wsmac\r";
  35          const  char xdata WMAC_ACK[]="AT+WSMAC\n\r+ok=A5A4A3A2A1A0\r\n\r\n";
  36          
  37          // add 2023/2/12 追加注册包设定
  38          const  char xdata NREGEN[]="at+nregen=A,on\r";
  39          const  char xdata NREGEN_ACK[]="AT+NREGEN=A,on\n\r+ok\r\n\r\n";
  40          
  41          const  char xdata NREGDT[]="at+nregdt=A,CL%MACCREG\r";
  42          const  char xdata NREGDT_ACK[]="AT+nregdt=A,%MAC\n\r+ok\r\n\r\n";
  43          
  44          // add 2023/2/12 end
  45          
  46          // add 2023/5/8 smartAPCong 模式打开
  47          //const  char xdata SMARTAP[]="AT+SMARTAPCONFIG=on\r";
  48          //const  char xdata SMARTAP_ACK[]="AT+SMARTAPCONFIG=on\n\r+ok\r\n\r\n";
  49          // add 2023/5/8 end
  50          
  51          const  char xdata WMODE[]="at+wmode=sta\r";
  52          const  char xdata WMODE_ACK[]="AT+WMODE=sta\n\r+ok\r\n\r\n";
  53          
  54          const  char xdata APMODECHECK[]="at+wmode\r";
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 2   

  55          const  char xdata MODECHECK_ACK[]="AT+wmode\n\r+ok=AP\r\n\r\n";
  56          
  57          const  char xdata APMODE[]="at+wmode=ap\r";
  58          const  char xdata APMODE_ACK[]="AT+WMODE=ap\n\r+ok\r\n\r\n";
  59          
  60          const  char xdata WNETP[]="at+netp=tcp,client,9999,www.healthsensor.com.cn\r";
  61          const  char xdata WNETP_ACK[]="at+netp=tcp,client,9999,www.healthsensor.com.cn\n\r+ok\r\n\r\n";
  62          
  63          //const  char xdata WNETP[]="at+NETP=TCP,CLIENT,9999,123.57.185.154\r";
  64          //const  char xdata WNETP_ACK[]="AT+NETP=TCP,CLIENT,9999,123.57.185.154\n\r+ok\r\n\r\n";
  65          
  66          //const  char xdata WNETP[]="at+netp=tcp,client,80,223.134.3.129\r";
  67          //const  char xdata WNETP_ACK[]="AT+NETP=tcp,client,80,223.134.3.129\n\r+ok\r\n\r\n";
  68          
  69          // legacy IP 2020/2/20
  70          //const  char xdata WNETP[]="at+netp=tcp,client,80,47.96.101.117\r";
  71          //const  char xdata WNETP_ACK[]="AT+NETP=tcp,client,80,47.96.101.117\n\r+ok\r\n\r\n";
  72          
  73          const  char xdata WSLK[]="at+wslk\r";
  74          const  char xdata WSLK_ACK[]="AT+WSLK\n\r+ok=SSID(MAC)\r\n\r\n";
  75          
  76          const  char xdata TCPON[]="at+tcpdis=on\r";
  77          const  char xdata TCPON_ACK[]="AT+TCPDIS=on\n\r+ok\r\n\r\n";
  78          
  79          const  char xdata TCPEN[]="at+tcpdis\r";
  80          const  char xdata TCPEN_ACK[]="AT+TCPDIS\n\r+ok=on\r\n\r\n";
  81          
  82          const  char xdata TCPLK[]="at+tcplk\r";
  83          const  char xdata TCPLK_ACK[]="AT+TCPLK\n\r+ok=on\r\n\r\n";
  84          
  85          const  char xdata RESET[]="at+z\r";
  86          const  char xdata RESET_ACK[]="AT+Z\n\r+ok\r\n\r\n";
  87          
  88          // add para
  89          const  char xdata TCPTO[]="AT+TCPTO=0\r";
  90          const  char xdata TCPTO_ACK[]="AT+TCPTO=0\n\r+ok\r\n\r\n";
  91          
  92          const  char xdata CMDPW[]="AT+CMDPW=GT\r";
  93          const  char xdata CMDPW_ACK[]="AT+CMDPW=GT\n\r+ok\r\n\r\n";
  94          
  95          // add command on transfer mode
  96          const  char xdata WMACHF[]="GTAT+WSMAC\r";
  97          const  char xdata WMACHF_ACK[]="AT+WSMAC\n\r+ok=A5A4A3A2A1A0\r\n\r\n";
  98          
  99          const  char xdata TCPLKHF[]="GTAT+TCPLK\r";
 100          const  char xdata TCPLKHF_ACK[]="AT+TCPLK\n\r+ok=on\r\n\r\n";
 101          
 102          const  char xdata TCPONHF[]="GTAT+TCPDIS=on\r";
 103          const  char xdata TCPONHF_ACK[]="AT+TCPDIS=on\n\r+ok\r\n\r\n";
 104          
 105          const  char xdata TCPENHF[]="GTAT+TCPDIS\r";
 106          const  char xdata TCPENHF_ACK[]="AT+TCPDIS\n\r+ok=on\r\n\r\n";
 107          
 108          //const  char xdata SENSOR_VERSION[]="1.0.0_2";  // VR-BB后reset处理对应
 109          //const  char xdata SENSOR_VERSION[]="1.0.0_3";  // 1,4->5  2,'p' cmd
 110          //const  char xdata SENSOR_VERSION[]="1.0.0_4";  // 1,逻辑改造（CMDPW） 2,GAIN设定处理
 111          const  char xdata SENSOR_VERSION[]="1.0.0_5";  // 1,APmode 2,netp = www.healthsensor.com.cn
 112          
 113          #define REC_WIFI_DATA   (Uart2NoRecTime >= 30 && pUART2_rptr >= 1)
 114          
 115          u8 wslkcnt10 = 0;
 116          u8 wslkcnt100 = 0;
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 3   

 117          
 118          void fInitWifi(void)
 119          {
 120   1        MacAddr[0] = 0xB1;
 121   1        MacAddr[1] = 0xB2;
 122   1        MacAddr[2] = 0xB3;
 123   1        MacAddr[3] = 0xB4;
 124   1        MacAddr[4] = 0xB5;
 125   1        MacAddr[5] = 0xB6;
 126   1        
 127   1        fClean_RecWIFI_Buf();
 128   1        StepCommWifi = WIFI_POWERON;
 129   1        isFirst = 0; // is first
 130   1      //  StepCommWifi = SERVER_HAND;     //debug
 131   1        WaitSendWifi = 600;
 132   1        
 133   1        bMamori = 1;          //add 2022-2-12
 134   1      }
 135          
 136          void fSendServerHand(void)
 137          {
 138   1        u16 Sum;
 139   1        u8  i;
 140   1        
 141   1        Sum = 0;
 142   1        Uart2Send('C');
 143   1        Sum += 'C';
 144   1        Uart2Send('L');
 145   1        Sum += 'L';
 146   1        
 147   1        Uart2Send(MacAddr[0]);
 148   1        Sum += MacAddr[0];
 149   1        Uart2Send(MacAddr[1]);
 150   1        Sum += MacAddr[1];
 151   1        Uart2Send(MacAddr[2]);
 152   1        Sum += MacAddr[2];
 153   1        Uart2Send(MacAddr[3]);
 154   1        Sum += MacAddr[3];
 155   1        Uart2Send(MacAddr[4]);
 156   1        Sum += MacAddr[4];
 157   1        Uart2Send(MacAddr[5]);
 158   1        Sum += MacAddr[5];
 159   1        
 160   1        Uart2Send(19);  // 12+7
 161   1        Sum += 19;
 162   1        
 163   1        Uart2Send('H');
 164   1        Sum += 'H';
 165   1        
 166   1        for(i=0;i<7;i++)
 167   1        {
 168   2          Uart2Send(SENSOR_VERSION[i]);
 169   2          Sum += SENSOR_VERSION[i];
 170   2        }
 171   1        
 172   1        Uart2Send((unsigned char)(Sum / 256));
 173   1        Uart2Send((unsigned char)(Sum));
 174   1        
 175   1        // Uart2Send(StepCommSensor);  //for debug   yaoshanchu!!!
 176   1        
 177   1      }
 178          
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 4   

 179          // 电文K，读取GAIN设定值
 180          void fSendGetGain(void)
 181          {
 182   1        u16 Sum;
 183   1        u8  i;
 184   1        
 185   1        Sum = 0;
 186   1        Uart2Send('C');
 187   1        Sum += 'C';
 188   1        Uart2Send('L');
 189   1        Sum += 'L';
 190   1        
 191   1        Uart2Send(MacAddr[0]);
 192   1        Sum += MacAddr[0];
 193   1        Uart2Send(MacAddr[1]);
 194   1        Sum += MacAddr[1];
 195   1        Uart2Send(MacAddr[2]);
 196   1        Sum += MacAddr[2];
 197   1        Uart2Send(MacAddr[3]);
 198   1        Sum += MacAddr[3];
 199   1        Uart2Send(MacAddr[4]);
 200   1        Sum += MacAddr[4];
 201   1        Uart2Send(MacAddr[5]);
 202   1        Sum += MacAddr[5];
 203   1        
 204   1        Uart2Send(19);  // 12+7
 205   1        Sum += 19;
 206   1        
 207   1        Uart2Send('K');
 208   1        Sum += 'K';
 209   1        
 210   1        for(i=0;i<7;i++)
 211   1        {
 212   2          Uart2Send(SENSOR_VERSION[i]);
 213   2          Sum += SENSOR_VERSION[i];
 214   2        }
 215   1        
 216   1        Uart2Send((unsigned char)(Sum / 256));
 217   1        Uart2Send((unsigned char)(Sum));
 218   1        
 219   1        // Uart2Send(StepCommSensor);  //for debug   yaoshanchu!!!
 220   1        
 221   1      }
 222          
 223          
 224          //void fSendServerData(void)
 225          //{
 226          //  u16 Sum;
 227          //  u8  i;
 228          //  
 229          //  Sum = 0;
 230          //  Uart2Send('C');
 231          //  Sum += 'C';
 232          //  Uart2Send('L');
 233          //  Sum += 'L';
 234          //  
 235          //  Uart2Send(MacAddr[0]);
 236          //  Sum += MacAddr[0];
 237          //  Uart2Send(MacAddr[1]);
 238          //  Sum += MacAddr[1];
 239          //  Uart2Send(MacAddr[2]);
 240          //  Sum += MacAddr[2];
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 5   

 241          //  Uart2Send(MacAddr[3]);
 242          //  Sum += MacAddr[3];
 243          //  Uart2Send(MacAddr[4]);
 244          //  Sum += MacAddr[4];
 245          //  Uart2Send(MacAddr[5]);
 246          //  Sum += MacAddr[5];
 247          //  
 248          //  Uart2Send(47);    //72 to 47    2022-2-12
 249          //  Sum += 47;
 250          //  
 251          //  Uart2Send('4');
 252          //  Sum += '4';
 253          //  
 254          //  for(i=0;i<4;i++)
 255          //  {
 256          //    Uart2Send(timestamp.time[i]);
 257          //    Sum += timestamp.time[i];
 258          //  }
 259          //  
 260          //  for(i=0;i<31;i++)    //56 to 31.   2022-2-12
 261          //  {
 262          //    Uart2Send(UART1_buffer[i]);
 263          //    Sum += UART1_buffer[i];
 264          //  }
 265          //  
 266          //  Uart2Send(Sum / 256);
 267          //  Uart2Send(Sum);
 268          //}
 269          
 270          // cmd4+cmd5(2 char) 一起送信
 271          void fSendServerData(void)
 272          {
 273   1        u16 Sum;
 274   1        u8  i;
 275   1        
 276   1        Sum = 0;
 277   1        Uart2Send('C');
 278   1        Sum += 'C';
 279   1        Uart2Send('L');
 280   1        Sum += 'L';
 281   1        
 282   1        Uart2Send(MacAddr[0]);
 283   1        Sum += MacAddr[0];
 284   1        Uart2Send(MacAddr[1]);
 285   1        Sum += MacAddr[1];
 286   1        Uart2Send(MacAddr[2]);
 287   1        Sum += MacAddr[2];
 288   1        Uart2Send(MacAddr[3]);
 289   1        Sum += MacAddr[3];
 290   1        Uart2Send(MacAddr[4]);
 291   1        Sum += MacAddr[4];
 292   1        Uart2Send(MacAddr[5]);
 293   1        Sum += MacAddr[5];
 294   1        
 295   1        Uart2Send(49);    //47 -> 49    2023-5-7
 296   1        Sum += 49;
 297   1        
 298   1        Uart2Send('4');
 299   1        Sum += '4';
 300   1        
 301   1        for(i=0;i<4;i++)
 302   1        {
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 6   

 303   2          Uart2Send(timestamp.time[i]);
 304   2          Sum += timestamp.time[i];
 305   2        }
 306   1        
 307   1        for(i=0;i<33;i++)    //31 to 33.   2023-5-7
 308   1        {
 309   2          Uart2Send(SEND_buffer[i]);
 310   2          Sum += SEND_buffer[i];
 311   2        }
 312   1        
 313   1        Uart2Send(Sum / 256);
 314   1        Uart2Send(Sum);
 315   1      }
 316          
 317          void fSend_gain_res(void)
 318          {
 319   1        u16 Sum;
 320   1        u8  i;
 321   1        
 322   1        Sum = 0;
 323   1        Uart2Send('C');
 324   1        Sum += 'C';
 325   1        Uart2Send('L');
 326   1        Sum += 'L';
 327   1        
 328   1        Uart2Send(MacAddr[0]);
 329   1        Sum += MacAddr[0];
 330   1        Uart2Send(MacAddr[1]);
 331   1        Sum += MacAddr[1];
 332   1        Uart2Send(MacAddr[2]);
 333   1        Sum += MacAddr[2];
 334   1        Uart2Send(MacAddr[3]);
 335   1        Sum += MacAddr[3];
 336   1        Uart2Send(MacAddr[4]);
 337   1        Sum += MacAddr[4];
 338   1        Uart2Send(MacAddr[5]);
 339   1        Sum += MacAddr[5];
 340   1        
 341   1        Uart2Send(70);    //47 -> 49    2023-5-7
 342   1        Sum += 69;
 343   1        
 344   1        Uart2Send('L');
 345   1        Sum += 'L';
 346   1        
 347   1        Uart2Send(bCommandResult);        //the result of command
 348   1        Sum += bCommandResult;
 349   1        
 350   1        for(i=0;i<4;i++)
 351   1        {
 352   2          Uart2Send(timestamp.time[i]);
 353   2          Sum += timestamp.time[i];
 354   2        }
 355   1        
 356   1        for(i=0;i<45;i++)
 357   1        {
 358   2          Uart2Send(Gain_set_buffer[i]);
 359   2          Sum += SEND_buffer[i];
 360   2        }
 361   1        
 362   1        Uart2Send(Sum / 256);
 363   1        Uart2Send(Sum);
 364   1      }
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 7   

 365          
 366          void fSend_gain_res_debug(void)
 367          {
 368   1        u16 Sum;
 369   1        u8  i;
 370   1        
 371   1        Sum = 0;
 372   1        Uart2Send('C');
 373   1        Sum += 'C';
 374   1        Uart2Send('L');
 375   1        Sum += 'L';
 376   1        
 377   1        Uart2Send(MacAddr[0]);
 378   1        Sum += MacAddr[0];
 379   1        Uart2Send(MacAddr[1]);
 380   1        Sum += MacAddr[1];
 381   1        Uart2Send(MacAddr[2]);
 382   1        Sum += MacAddr[2];
 383   1        Uart2Send(MacAddr[3]);
 384   1        Sum += MacAddr[3];
 385   1        Uart2Send(MacAddr[4]);
 386   1        Sum += MacAddr[4];
 387   1        Uart2Send(MacAddr[5]);
 388   1        Sum += MacAddr[5];
 389   1        
 390   1        Uart2Send(70);    //47 -> 49    2023-5-7
 391   1        Sum += 69;
 392   1        
 393   1        Uart2Send('L');
 394   1        Sum += 'L';
 395   1        
 396   1        Uart2Send(bCommandResult);        //the result of command
 397   1        Sum += bCommandResult;
 398   1        
 399   1        for(i=0;i<4;i++)
 400   1        {
 401   2          Uart2Send(timestamp.time[i]);
 402   2          Sum += timestamp.time[i];
 403   2        }
 404   1        
 405   1        for(i=0;i<18;i++)
 406   1        {
 407   2          Uart2Send(GAIN_SETTING[i]);
 408   2          Sum += SEND_buffer[i];
 409   2        }
 410   1        
 411   1        Uart2Send(Sum / 256);
 412   1        Uart2Send(Sum);
 413   1      }
 414          
 415          //add by 2022-2-12
 416          void fSend_CmdData2(void)
 417          {
 418   1        u16 Sum;
 419   1        u8  i;
 420   1        
 421   1        Sum = 0;
 422   1        Uart2Send('C');
 423   1        Sum += 'C';
 424   1        Uart2Send('L');
 425   1        Sum += 'L';
 426   1        
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 8   

 427   1        Uart2Send(MacAddr[0]);
 428   1        Sum += MacAddr[0];
 429   1        Uart2Send(MacAddr[1]);
 430   1        Sum += MacAddr[1];
 431   1        Uart2Send(MacAddr[2]);
 432   1        Sum += MacAddr[2];
 433   1        Uart2Send(MacAddr[3]);
 434   1        Sum += MacAddr[3];
 435   1        Uart2Send(MacAddr[4]);
 436   1        Sum += MacAddr[4];
 437   1        Uart2Send(MacAddr[5]);
 438   1        Sum += MacAddr[5];
 439   1        
 440   1        i = 9 + 2 + 2;
 441   1        
 442   1        Uart2Send(i);
 443   1        Sum += i;
 444   1        
 445   1        Uart2Send(ServerCommand);  //the name of command
 446   1        Uart2Send(bCommandResult);        //the result of command
 447   1        
 448   1        Uart2Send(Sum / 256);
 449   1        Uart2Send(Sum);
 450   1        
 451   1      }
 452          
 453          //add by 2023-5-7
 454          void fSend_study_res(void)
 455          {
 456   1        u16 Sum;
 457   1        u8  i;
 458   1        
 459   1        Sum = 0;
 460   1        Uart2Send('C');
 461   1        Sum += 'C';
 462   1        Uart2Send('L');
 463   1        Sum += 'L';
 464   1        
 465   1        Uart2Send(MacAddr[0]);
 466   1        Sum += MacAddr[0];
 467   1        Uart2Send(MacAddr[1]);
 468   1        Sum += MacAddr[1];
 469   1        Uart2Send(MacAddr[2]);
 470   1        Sum += MacAddr[2];
 471   1        Uart2Send(MacAddr[3]);
 472   1        Sum += MacAddr[3];
 473   1        Uart2Send(MacAddr[4]);
 474   1        Sum += MacAddr[4];
 475   1        Uart2Send(MacAddr[5]);
 476   1        Sum += MacAddr[5];
 477   1        
 478   1        i = 9 + 2 + 2+80;
 479   1        
 480   1        Uart2Send(i);
 481   1        Sum += i;
 482   1        
 483   1        Uart2Send(ServerCommand);  //the name of command
 484   1        Uart2Send(bCommandResult);        //the result of command
 485   1        
 486   1        for(i=0;i<80;i++)    
 487   1        {
 488   2          Uart2Send(UART1_buffer[i]);
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 9   

 489   2          Sum += UART1_buffer[i];
 490   2        }
 491   1        
 492   1        Uart2Send(Sum / 256);
 493   1        Uart2Send(Sum);
 494   1        
 495   1      }
 496          
 497          // for trace. 
 498          void fSendServerDebug(char dat)
 499          {
 500   1        u16 Sum;
 501   1        u8  i;
 502   1        
 503   1        Sum = 0;
 504   1        Uart2Send('C');
 505   1        Sum += 'C';
 506   1        Uart2Send('L');
 507   1        Sum += 'L';
 508   1        
 509   1        Uart2Send(MacAddr[0]);
 510   1        Sum += MacAddr[0];
 511   1        Uart2Send(MacAddr[1]);
 512   1        Sum += MacAddr[1];
 513   1        Uart2Send(MacAddr[2]);
 514   1        Sum += MacAddr[2];
 515   1        Uart2Send(MacAddr[3]);
 516   1        Sum += MacAddr[3];
 517   1        Uart2Send(MacAddr[4]);
 518   1        Sum += MacAddr[4];
 519   1        Uart2Send(MacAddr[5]);
 520   1        Sum += MacAddr[5];
 521   1        
 522   1        Uart2Send(68);
 523   1        Sum += 68;
 524   1        
 525   1        Uart2Send(71);
 526   1        Sum += 71;
 527   1        
 528   1        Uart2Send(dat);    //cmd
 529   1        Sum += dat;
 530   1      
 531   1        for(i=0;i<4;i++)
 532   1        {
 533   2          Uart2Send(timestamp.time[i]);
 534   2          Sum += timestamp.time[i];
 535   2        }
 536   1        
 537   1      //  for(i=0;i<31;i++)    //56 to 31.   2022-2-12
 538   1      //  {
 539   1      //    Uart2Send(UART1_buffer[i]);
 540   1      //    Sum += UART1_buffer[i];
 541   1      //  }
 542   1        
 543   1        Uart2Send(Sum / 256);
 544   1        Uart2Send(Sum);
 545   1      }
 546          
 547          u8 fVerifyServerCammand(void)
 548          {
 549   1        u8 Command;
 550   1        u8 i;
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 10  

 551   1        u16 CheckSum;
 552   1        
 553   1        Command = 0;
 554   1        CheckSum = 0;
 555   1        
 556   1        for(i = 0; i < (pUART2_rptr - 2); i++) CheckSum += UART2_buffer[i];         //sum data except last two data
 557   1        
 558   1        if(UART2_buffer[pUART2_rptr - 1] != (unsigned char)(CheckSum)) Command = 0; //check sum low byte
 559   1        else if(UART2_buffer[pUART2_rptr - 2] != (unsigned char)(CheckSum >> 8)) Command = 0; //check sum high by
             -te
 560   1        else if(UART2_buffer[0] != 'S' || UART2_buffer[1] != 'V') Command = 0;      //check frame head
 561   1        else if(UART2_buffer[2] != MacAddr[0]) Command = 0;                         //check ID
 562   1        else if(UART2_buffer[3] != MacAddr[1]) Command = 0;
 563   1        else if(UART2_buffer[4] != MacAddr[2]) Command = 0;
 564   1        else if(UART2_buffer[5] != MacAddr[3]) Command = 0;
 565   1        else if(UART2_buffer[6] != MacAddr[4]) Command = 0;
 566   1        else if(UART2_buffer[7] != MacAddr[5]) Command = 0;
 567   1        else if(UART2_buffer[8] != pUART2_rptr) Command = 0;                        //check frame length
 568   1        else Command = 1;
 569   1        
 570   1        Command = 1;
 571   1        
 572   1        return Command;
 573   1      }
 574          
 575          //add 2022-2-12
 576          void afterRevServerCommand(void){
 577   1        
 578   1        bCommandResult = 0;
 579   1        
 580   1        switch(ServerCommand){
 581   2          case 'x':                  //pause the Mamori
 582   2            bMamori = 0;
 583   2            //bCommandResult = 1;
 584   2          break;
 585   2          
 586   2          case 'c':                  //resum the Marori
 587   2              bMamori = 1;
 588   2          
 589   2              StepCommSensor = HAND2_SENSOR;
 590   2              //bCommandResult = 1;
 591   2          break;  
 592   2          
 593   2          case 'T':
 594   2            if(ReplyTime>0 && ReplyTime <=10){
 595   3              SendInterval= ReplyTime*100;  
 596   3              iapErase(MAMORI_T_ADDR);
 597   3              iapWrite(MAMORI_T_ADDR,ReplyTime);
 598   3              //bCommandResult = ReplyTime;
 599   3            }
 600   2          break;
 601   2            
 602   2          case 'G':
 603   2          case 'u':
 604   2            StepCommWifi = REC_SERVER_COMMAND;      //turn to command mode
 605   2          
 606   2            bServer_Cmd_Ack = 0;
 607   2            bServer_Cmd_res = 0;
 608   2          break;
 609   2          
 610   2      
 611   2      //    default:
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 11  

 612   2      //      //StepCommWifi = REC_SERVER_COMMAND;      //turn to command mode
 613   2      //      StepCommWifi = WIFI_IDLE; 
 614   2      //      bTmp = 0;
 615   2      //    break;
 616   2        }
 617   1        
 618   1        fSend_CmdData2();
 619   1      
 620   1      }
 621          
 622          void fClean_RecWIFI_Buf(void)
 623          {
 624   1        u8 i;
 625   1        for(i=0;i<70;i++) UART2_buffer[i] = 0;
 626   1        Uart2NoRecTime = 0;
 627   1        pUART2_rptr = 0;
 628   1      }
 629          
 630          void fSendToWIFI(void)
 631          {
 632   1        switch(StepCommWifi)
 633   1        {
 634   2          case WIFI_APPLY_AT: 
 635   2            fClean_RecWIFI_Buf();
 636   2            Uart2SendStr(APPLY_AT); 
 637   2            StepCommWifi = WIFI_APPLY_AT_ACK;
 638   2          break;
 639   2            
 640   2          case WIFI_ENT_AT: 
 641   2            fClean_RecWIFI_Buf();
 642   2            Uart2SendStr(ENT_AT); 
 643   2            StepCommWifi = WAIT_ENT_AT_ACK;
 644   2          break;
 645   2          
 646   2          case WIFI_WMODE:
 647   2            fClean_RecWIFI_Buf();
 648   2            Uart2SendStr(WMODE); 
 649   2            StepCommWifi = WIFI_WMODE_ACK;
 650   2          break;  
 651   2          
 652   2      //    case WIFI_CMDPW_STAT:
 653   2      //      fClean_RecWIFI_Buf();
 654   2      //      Uart2SendStr(CMDPW_STAT); 
 655   2      //      StepCommWifi = WIFI_CMDPW_STAT_ACK;
 656   2      //    break;
 657   2      
 658   2          case WIFI_ENTM:
 659   2            fClean_RecWIFI_Buf();
 660   2            Uart2SendStr(ENTM); 
 661   2            StepCommWifi = WIFI_ENTM_ACK;
 662   2          break;      
 663   2      
 664   2          // add 2023/5/8 start
 665   2          //case WIFI_SMARTAP_ON:   
 666   2          //  fClean_RecWIFI_Buf();
 667   2          //  Uart2SendStr(SMARTAP); 
 668   2          //  StepCommWifi = WIFI_SMARTAP_ON_ACK;
 669   2          //break;  
 670   2          // add 2023/5/8 end
 671   2          
 672   2          // add 2023/2/12 start
 673   2          case WIFI_NREGEN:   
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 12  

 674   2            fClean_RecWIFI_Buf();
 675   2            Uart2SendStr(NREGEN); 
 676   2            StepCommWifi = WIFI_NREGEN_ACK;
 677   2          break;
 678   2            
 679   2          case WIFI_NREGDT:   
 680   2            fClean_RecWIFI_Buf();
 681   2            Uart2SendStr(NREGDT); 
 682   2            StepCommWifi = WIFI_NREGDT_ACK;
 683   2          break;      
 684   2          // add 2023/2/12 end
 685   2            
 686   2          case WIFI_WNETP:
 687   2            fClean_RecWIFI_Buf();
 688   2            Uart2SendStr(WNETP); 
 689   2            StepCommWifi = WIFI_WNETP_ACK;
 690   2          break;
 691   2        
 692   2      //    case WIFI_CMDPW_SET:    
 693   2      //      fClean_RecWIFI_Buf();
 694   2      //      Uart2SendStr(CMDPW_SET); 
 695   2      //      StepCommWifi = WIFI_CMDPW_SET_ACK;
 696   2      //    break;
 697   2            
 698   2          case WIFI_RESET1: 
 699   2            fClean_RecWIFI_Buf();
 700   2            Uart2SendStr(RESET); 
 701   2            StepCommWifi = WIFI_RESET1_ACK; 
 702   2          break;
 703   2          
 704   2      //    case WIFI_APPLY1_AT: 
 705   2      //      fClean_RecWIFI_Buf();
 706   2      //      Uart2SendStr(APPLY_AT); 
 707   2      //      StepCommWifi = WIFI_APPLY1_AT_ACK;
 708   2      //    break;
 709   2      //      
 710   2      //    case WIFI_ENT1_AT:  
 711   2      //      fClean_RecWIFI_Buf();
 712   2      //      Uart2SendStr(ENT_AT); 
 713   2      //      StepCommWifi = WAIT_ENT1_AT_ACK;
 714   2      //    break;
 715   2          
 716   2          // add for AP mode 20230605
 717   2          case WIFI_APMODE_CHECK:
 718   2            fClean_RecWIFI_Buf();
 719   2            Uart2SendStr(APMODECHECK); 
 720   2            StepCommWifi = WIFI_APMODE_CHECK_ACK;
 721   2          break;  
 722   2          
 723   2          case WIFI_WSLK:
 724   2            fClean_RecWIFI_Buf();
 725   2            Uart2SendStr(WSLK); 
 726   2            StepCommWifi = WIFI_WSLK_ACK;
 727   2          break;
 728   2          
 729   2          case WIFI_WSLK2:
 730   2            fClean_RecWIFI_Buf();
 731   2            Uart2SendStr(WSLK); 
 732   2            StepCommWifi = WIFI_WSLK2_ACK;
 733   2          break;
 734   2      
 735   2          case WIFI_APMODE_SET:
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 13  

 736   2            fClean_RecWIFI_Buf();
 737   2            Uart2SendStr(APMODE); 
 738   2            StepCommWifi = WIFI_APMODE_SET_ACK;
 739   2          break;    
 740   2          
 741   2          case WIFI_RESET2: 
 742   2            fClean_RecWIFI_Buf();
 743   2            Uart2SendStr(RESET); 
 744   2            StepCommWifi = WIFI_RESET2_ACK; 
 745   2          break;
 746   2        
 747   2          // add for AP mode end
 748   2          case WIFI_WMAC:   
 749   2            fClean_RecWIFI_Buf();
 750   2            Uart2SendStr(WMAC); 
 751   2            StepCommWifi = WIFI_WMAC_ACK;
 752   2          break;
 753   2          
 754   2          case WIFI_WMAC_SEC:   
 755   2            fClean_RecWIFI_Buf();
 756   2            Uart2SendStr(WMACHF); 
 757   2            StepCommWifi = WIFI_WMAC_SEC_ACK;
 758   2          break;
 759   2          
 760   2          case WIFI_TCPLK:  
 761   2            fClean_RecWIFI_Buf();
 762   2            Uart2SendStr(TCPLK); 
 763   2            StepCommWifi = WIFI_TCPLK_ACK;
 764   2          break;
 765   2          
 766   2          case WIFI_TCPLK_SEC:  
 767   2            fClean_RecWIFI_Buf();
 768   2            Uart2SendStr(TCPLKHF); 
 769   2            StepCommWifi = WIFI_TCPLK_SEC_ACK;
 770   2          break;
 771   2          
 772   2          case INIT_WIFI:             //wifi模块初始化复位成功后进入INIT_WIFI状态
 773   2            if(StepCommSensor == IDLE_SENSOR) //if sensor ready,do shake hand
 774   2            {
 775   3              StepCommWifi = SERVER_HAND;
 776   3            }
 777   2          break;
 778   2            
 779   2          case SERVER_HAND:           //shake hand and wait for ack
 780   2            fClean_RecWIFI_Buf();
 781   2            fSendServerHand();
 782   2            StepCommWifi = SERVER_HAND_ACK;
 783   2          break;  
 784   2          
 785   2          case GET_GAIN:            //get gain setting
 786   2            fClean_RecWIFI_Buf();
 787   2            fSendGetGain();
 788   2            StepCommWifi = GET_GAIN_ACK;
 789   2          break;
 790   2            
 791   2          // wifi send 
 792   2          
 793   2          case WIFI_IDLE:             //after success shake hand enter idle status
 794   2            if(bSend_WIFI_Data)       //set after recevive sensor data
 795   2            {
 796   3              if(bMamori){
 797   4                bSend_WIFI_Data = 0;    //surrounding parameter send to server
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 14  

 798   4                fSendServerData();
 799   4              }
 800   3            }
 801   2            
 802   2            // for trace 2022-9-28
 803   2            if(bSend_MIO_3_1000)  // RC of command 3 is 0
 804   2            {
 805   3              bSend_MIO_3_1000 = 0;
 806   3              fSendServerDebug('X');
 807   3            }
 808   2            else if(bSend_MIO_4_1000) // RC of command 4 is 0
 809   2            {
 810   3              bSend_MIO_4_1000 = 0;
 811   3              fSendServerDebug('Y');
 812   3            }
 813   2      
 814   2          break;
 815   2            
 816   2          case REC_SERVER_COMMAND:    //success for received command of server, wait for reply data
 817   2            if(bServer_Cmd_Ack)
 818   2            {
 819   3              bServer_Cmd_Ack = 0;
 820   3              //fSend_CmdData();
 821   3              //fSend_CmdData2();     //tmp  2022-2-12
 822   3              if(ServerCommand != 'u'){
 823   4                fSend_study_res();
 824   4                StepCommWifi = WIFI_IDLE;
 825   4              }
 826   3              else{
 827   4                fSend_CmdData2();
 828   4                WaitSendWifi = 1500;
 829   4                StepCommWifi = SERVER_HAND;
 830   4              }
 831   3            } else if(bServer_Cmd_res){
 832   3              bServer_Cmd_res = 0;
 833   3              fSend_CmdData2();
 834   3            }       
 835   2          break;
 836   2            
 837   2      //    case WIFI_GAIN_SET:
 838   2      //      if(bServer_Cmd_Ack){
 839   2      //        fSend_gain_res();
 840   2      //        StepCommWifi = WIFI_IDLE;     
 841   2      //      }
 842   2      //      
 843   2      //    break;
 844   2        }
 845   1      }
 846              
 847          void fRecWifi(void)
 848          {
 849   1        u8 i;
 850   1        
 851   1        switch(StepCommWifi)
 852   1        {
 853   2          case WIFI_APPLY_AT_ACK: 
 854   2            if(REC_WIFI_DATA) 
 855   2            {
 856   3              if(UART2_buffer[0] == 'a') 
 857   3              {
 858   4                StepCommWifi = WIFI_ENT_AT;
 859   4              }
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 15  

 860   3            }
 861   2            else if(Uart2NoRecTime >= 100) 
 862   2            {
 863   3              WaitSendWifi = 100;
 864   3              StepCommWifi = WIFI_APPLY_AT;
 865   3            }
 866   2          break;
 867   2        
 868   2          case WAIT_ENT_AT_ACK:   
 869   2            if(REC_WIFI_DATA) 
 870   2            {
 871   3              if(UART2_buffer[0] == '+' && UART2_buffer[1] == 'o' && UART2_buffer[2] == 'k') 
 872   3              {
 873   4                //StepCommWifi = WIFI_CMDPW_STAT;
 874   4                StepCommWifi = WIFI_WMODE;
 875   4              }
 876   3            }
 877   2            else if(Uart2NoRecTime >= 100) 
 878   2            {
 879   3              WaitSendWifi = 100;
 880   3              StepCommWifi = WIFI_APPLY_AT;
 881   3            }
 882   2          break;
 883   2            
 884   2          case WIFI_WSLK_ACK:
 885   2            if(REC_WIFI_DATA) 
 886   2            {
 887   3              if(UART2_buffer[13] == 'D' && UART2_buffer[14] == 'i' && UART2_buffer[15] == 's')
 888   3              {
 889   4                if(wslkcnt10 < 100){    // 10s
 890   5                  WaitSendWifi = 10;
 891   5                  StepCommWifi = WIFI_WSLK;
 892   5                  wslkcnt10 = wslkcnt10 + 1;
 893   5                }else{
 894   5                  wslkcnt10 = 0;
 895   5                  StepCommWifi = WIFI_APMODE_SET;
 896   5                }
 897   4              }
 898   3              else if(UART2_buffer[9] == '+' && UART2_buffer[10] == 'o' && UART2_buffer[11] == 'k')
 899   3              {
 900   4                //StepCommWifi = WIFI_WMAC;
 901   4                StepCommWifi = WIFI_TCPLK;
 902   4              }
 903   3            }
 904   2            else if(Uart2NoRecTime >= 100) 
 905   2            {
 906   3              if(wslkcnt100 < 10){   // 10s
 907   4                WaitSendWifi = 100;
 908   4                wslkcnt100 = wslkcnt100 + 1;
 909   4                StepCommWifi = WIFI_WSLK;
 910   4              }else{
 911   4                  wslkcnt100 = 0;
 912   4                  StepCommWifi = WIFI_APMODE_SET;         
 913   4              }
 914   3            }
 915   2          
 916   2          break;  
 917   2            
 918   2          case WIFI_WSLK2_ACK:
 919   2            if(REC_WIFI_DATA) 
 920   2            {
 921   3              if(UART2_buffer[13] == 'D' && UART2_buffer[14] == 'i' && UART2_buffer[15] == 's')
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 16  

 922   3              {
 923   4                WaitSendWifi = 100;
 924   4                StepCommWifi = WIFI_WSLK2;
 925   4              }
 926   3              else if(UART2_buffer[9] == '+' && UART2_buffer[10] == 'o' && UART2_buffer[11] == 'k')
 927   3              {
 928   4                StepCommWifi = WIFI_TCPLK;
 929   4              }
 930   3              else if(UART2_buffer[0] == 's' && UART2_buffer[1] == 'o' && UART2_buffer[2] == 'k')
 931   3              {
 932   4                StepCommWifi = WIFI_APPLY_AT;   // 服务器回答：网络建立且为透传状态
 933   4              }
 934   3            }
 935   2            else if(Uart2NoRecTime >= 200) 
 936   2            {
 937   3              WaitSendWifi = 200;
 938   3              StepCommWifi = WIFI_WSLK2;
 939   3            }
 940   2          
 941   2          break;
 942   2      
 943   2          case WIFI_APMODE_SET_ACK:   
 944   2            if(REC_WIFI_DATA) 
 945   2            {
 946   3              if(UART2_buffer[13] == '+' && UART2_buffer[14] == 'o' && UART2_buffer[15] == 'k') 
 947   3              {
 948   4                StepCommWifi = WIFI_RESET2;
 949   4              }
 950   3            }
 951   2            else if(Uart2NoRecTime >= 100) 
 952   2            {
 953   3              WaitSendWifi = 100;
 954   3              StepCommWifi = WIFI_APMODE_SET;
 955   3            }
 956   2          break;      
 957   2            
 958   2      //    case WIFI_CMDPW_STAT_ACK:   
 959   2      //      if(REC_WIFI_DATA) 
 960   2      //      {
 961   2      //        if(pUART2_rptr > 15){
 962   2      //          if(UART2_buffer[14] == 'G' && UART2_buffer[15] == 'T' ){
 963   2      //            //StepCommWifi = WIFI_ENTM;
 964   2      //            StepCommWifi = WIFI_APMODE_CHECK;
 965   2      //          }else{
 966   2      //            StepCommWifi = WIFI_NREGEN;
 967   2      //          }           
 968   2      //        }else{
 969   2      //          if(UART2_buffer[10] == '+' && UART2_buffer[11] == 'o' && UART2_buffer[12] == 'k'){
 970   2      //            StepCommWifi = WIFI_NREGEN;
 971   2      //          }else{
 972   2      //            StepCommWifi = WIFI_CMDPW_STAT;
 973   2      //          }
 974   2      //        }
 975   2      //      }
 976   2      //      else if(Uart2NoRecTime >= 100) 
 977   2      //      {
 978   2      //        WaitSendWifi = 100;
 979   2      //        StepCommWifi = WIFI_CMDPW_STAT;
 980   2      //      }
 981   2      //    break;
 982   2            
 983   2          case WIFI_APMODE_CHECK_ACK:   
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 17  

 984   2            if(REC_WIFI_DATA) 
 985   2            {
 986   3              //const  char xdata MODECHECK_ACK[]="AT+wmode\n\r+ok=AP\r\n\r\n";
 987   3              if(pUART2_rptr > 15){
 988   4                if(UART2_buffer[14] == 'A' && UART2_buffer[15] == 'P' ){
 989   5                  WaitSendWifi = 100;  // 1s 间隔 
 990   5                  StepCommWifi = WIFI_APMODE_CHECK;  // AP模式继续循环，知道解除AP模式
 991   5                }else{
 992   5                  StepCommWifi = WIFI_WSLK;
 993   5                }           
 994   4              }
 995   3            }
 996   2            else if(Uart2NoRecTime >= 100) 
 997   2            {
 998   3              WaitSendWifi = 100;
 999   3              StepCommWifi = WIFI_APMODE_CHECK;
1000   3            }
1001   2          break;
1002   2            
1003   2          case WIFI_ENTM_ACK:   
1004   2            if(REC_WIFI_DATA) 
1005   2            {
1006   3              if(UART2_buffer[9] == '+' && UART2_buffer[10] == 'o' && UART2_buffer[11] == 'k') 
1007   3              {
1008   4                //StepCommWifi = WIFI_WMAC_SEC;
1009   4                  StepCommWifi = INIT_WIFI;
1010   4              }
1011   3            }
1012   2            else if(Uart2NoRecTime >= 100) 
1013   2            {
1014   3              WaitSendWifi = 100;
1015   3              StepCommWifi = WIFI_ENTM;
1016   3            }
1017   2          break;
1018   2            
1019   2          case WIFI_TCPLK_SEC_ACK:  
1020   2      
1021   2            if(REC_WIFI_DATA) 
1022   2            {
1023   3      //        Uart2SendStr("debug line 762\r");
1024   3      //        Uart2SendStr(UART2_buffer);
1025   3              if(UART2_buffer[3] == '=' && UART2_buffer[4] == 'o') 
1026   3              {
1027   4                StepCommWifi = INIT_WIFI;
1028   4              } 
1029   3            }
1030   2            else if(Uart2NoRecTime >= 100) 
1031   2            {
1032   3              WaitSendWifi = 1000;
1033   3              StepCommWifi = WIFI_TCPLK_SEC;
1034   3            }
1035   2          break;  
1036   2            
1037   2          case WIFI_TCPLK_ACK:  
1038   2            if(REC_WIFI_DATA) 
1039   2            {
1040   3              if(UART2_buffer[13] == '=' && UART2_buffer[14] == 'o' && UART2_buffer[15] == 'n') 
1041   3              {
1042   4                //StepCommWifi = WIFI_RESET2;
1043   4                StepCommWifi = WIFI_ENTM; // 转换透传模式
1044   4              } 
1045   3            }
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 18  

1046   2            else if(Uart2NoRecTime >= 100) 
1047   2            {
1048   3              WaitSendWifi = 100;
1049   3              StepCommWifi = WIFI_TCPLK;
1050   3            }
1051   2          break;      
1052   2          
1053   2          // add 2023-5-8 追加smartAP模式打开
1054   2      //    case WIFI_SMARTAP_ON_ACK:
1055   2      //      if(REC_WIFI_DATA) 
1056   2      //      {
1057   2      //        if(UART2_buffer[21] == '+' && UART2_buffer[22] == 'o' && UART2_buffer[23] == 'k') 
1058   2      //        { 
1059   2      //          StepCommWifi = WIFI_NREGEN;
1060   2      //        } 
1061   2      //      }
1062   2      //      else if(Uart2NoRecTime >= 100) 
1063   2      //      {
1064   2      //        WaitSendWifi = 100;
1065   2      //        StepCommWifi = WIFI_SMARTAP_ON;
1066   2      //      }
1067   2      //    break;
1068   2            
1069   2          // add 2023-2-13 start
1070   2          case WIFI_NREGEN_ACK:
1071   2            if(REC_WIFI_DATA) 
1072   2            {
1073   3              if(UART2_buffer[16] == '+' && UART2_buffer[17] == 'o' && UART2_buffer[18] == 'k') 
1074   3              {
1075   4                StepCommWifi = WIFI_NREGDT;
1076   4              }
1077   3            }
1078   2            else if(Uart2NoRecTime >= 100) 
1079   2            {
1080   3              WaitSendWifi = 100;
1081   3              StepCommWifi = WIFI_NREGEN;
1082   3            }
1083   2          break;
1084   2            
1085   2          case WIFI_NREGDT_ACK:
1086   2            if(REC_WIFI_DATA) 
1087   2            {
1088   3              if(UART2_buffer[24] == '+' && UART2_buffer[25] == 'o' && UART2_buffer[26] == 'k') 
1089   3              {
1090   4                StepCommWifi = WIFI_WMAC;
1091   4                //StepCommWifi = WIFI_WNETP;
1092   4              }
1093   3            }
1094   2            else if(Uart2NoRecTime >= 100) 
1095   2            {
1096   3              WaitSendWifi = 100;
1097   3              StepCommWifi = WIFI_NREGDT;
1098   3            }
1099   2          break;
1100   2          // add 2023-2-13 end
1101   2            
1102   2      //    case WIFI_WMAC_SEC_ACK: 
1103   2      
1104   2      //      if(REC_WIFI_DATA) 
1105   2      //      {
1106   2      //        if(UART2_buffer[0] == '+' && UART2_buffer[1] == 'o' && UART2_buffer[2] == 'k') 
1107   2      //        { 
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 19  

1108   2      //          MacAddr[0] = IntegrateAscToHex(UART2_buffer[4],UART2_buffer[5]);
1109   2      //          MacAddr[1] = IntegrateAscToHex(UART2_buffer[6],UART2_buffer[7]);
1110   2      //          MacAddr[2] = IntegrateAscToHex(UART2_buffer[8],UART2_buffer[9]);
1111   2      //          MacAddr[3] = IntegrateAscToHex(UART2_buffer[10],UART2_buffer[11]);
1112   2      //          MacAddr[4] = IntegrateAscToHex(UART2_buffer[12],UART2_buffer[13]);
1113   2      //          MacAddr[5] = IntegrateAscToHex(UART2_buffer[14],UART2_buffer[15]);
1114   2      //          
1115   2      //          StepCommWifi = WIFI_TCPLK_SEC;
1116   2      //        } 
1117   2      //      }
1118   2      //      else if(Uart2NoRecTime >= 100) 
1119   2      //      {
1120   2      //        WaitSendWifi = 100;
1121   2      //        StepCommWifi = WIFI_WMAC_SEC;
1122   2      //      }
1123   2      //    break;
1124   2      
1125   2          case WIFI_WMAC_ACK:   
1126   2            if(REC_WIFI_DATA) 
1127   2            {
1128   3              if(UART2_buffer[10] == '+' && UART2_buffer[11] == 'o' && UART2_buffer[12] == 'k') 
1129   3              { 
1130   4                MacAddr[0] = IntegrateAscToHex(UART2_buffer[14],UART2_buffer[15]);
1131   4                MacAddr[1] = IntegrateAscToHex(UART2_buffer[16],UART2_buffer[17]);
1132   4                MacAddr[2] = IntegrateAscToHex(UART2_buffer[18],UART2_buffer[19]);
1133   4                MacAddr[3] = IntegrateAscToHex(UART2_buffer[20],UART2_buffer[21]);
1134   4                MacAddr[4] = IntegrateAscToHex(UART2_buffer[22],UART2_buffer[23]);
1135   4                MacAddr[5] = IntegrateAscToHex(UART2_buffer[24],UART2_buffer[25]);
1136   4                
1137   4                StepCommWifi = WIFI_WNETP;
1138   4                //StepCommWifi = WIFI_TCPLK;
1139   4              } 
1140   3            }
1141   2            else if(Uart2NoRecTime >= 100) 
1142   2            {
1143   3              WaitSendWifi = 100;
1144   3              StepCommWifi = WIFI_WMAC;
1145   3            }
1146   2          break;
1147   2            
1148   2          case WIFI_WMODE_ACK:
1149   2            if(REC_WIFI_DATA) 
1150   2            {
1151   3              if(UART2_buffer[14] == '+' && UART2_buffer[15] == 'o' && UART2_buffer[16] == 'k') 
1152   3              {
1153   4                //StepCommWifi = WIFI_CMDPW_STAT;
1154   4                StepCommWifi = WIFI_NREGEN;
1155   4              }
1156   3            }
1157   2            else if(Uart2NoRecTime >= 100) 
1158   2            {
1159   3              WaitSendWifi = 100;
1160   3              StepCommWifi = WIFI_WMODE;
1161   3            }
1162   2          break;
1163   2            
1164   2          case WIFI_CMDPW_SET_ACK:
1165   2            if(REC_WIFI_DATA) 
1166   2            {
1167   3              if(UART2_buffer[13] == '+' && UART2_buffer[14] == 'o' && UART2_buffer[15] == 'k') 
1168   3              {
1169   4                StepCommWifi = WIFI_RESET1;
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 20  

1170   4              }
1171   3            }
1172   2            else if(Uart2NoRecTime >= 100) 
1173   2            {
1174   3              WaitSendWifi = 100;
1175   3              StepCommWifi = WIFI_CMDPW_SET;
1176   3            }
1177   2          break;
1178   2            
1179   2          case WIFI_WNETP_ACK:
1180   2            if(REC_WIFI_DATA) 
1181   2            {
1182   3              if(UART2_buffer[49] == '+' && UART2_buffer[50] == 'o' && UART2_buffer[51] == 'k') 
1183   3              {
1184   4                //StepCommWifi = WIFI_CMDPW_SET;
1185   4                StepCommWifi = WIFI_APMODE_CHECK;
1186   4              }
1187   3            }
1188   2            else if(Uart2NoRecTime >= 100) 
1189   2            {
1190   3              WaitSendWifi = 100;
1191   3              StepCommWifi = WIFI_WNETP;
1192   3            }
1193   2          break;
1194   2          
1195   2            
1196   2          case WIFI_RESET1_ACK:
1197   2            if(REC_WIFI_DATA) 
1198   2            {
1199   3              if(UART2_buffer[6] == '+' && UART2_buffer[7] == 'o' && UART2_buffer[8] == 'k') 
1200   3              {
1201   4                WaitSendWifi = 150;
1202   4                //StepCommWifi = WIFI_WMAC_SEC;
1203   4                StepCommWifi = WIFI_CMDPW_STAT;
1204   4              } 
1205   3            }
1206   2            else if(Uart2NoRecTime >= 100) 
1207   2            {
1208   3              WaitSendWifi = 100;
1209   3              StepCommWifi = WIFI_RESET1;
1210   3            }
1211   2          break;
1212   2            
1213   2          case WIFI_RESET2_ACK:
1214   2            if(REC_WIFI_DATA) 
1215   2            {
1216   3              if(UART2_buffer[6] == '+' && UART2_buffer[7] == 'o' && UART2_buffer[8] == 'k') 
1217   3              {
1218   4                WaitSendWifi = 150;
1219   4                StepCommWifi = WIFI_WSLK2;
1220   4              } 
1221   3            }
1222   2            else if(Uart2NoRecTime >= 100) 
1223   2            {
1224   3              WaitSendWifi = 100;
1225   3              StepCommWifi = WIFI_RESET2;
1226   3            }
1227   2          break;
1228   2          
1229   2              
1230   2          case SERVER_HAND_ACK:
1231   2            if(REC_WIFI_DATA) 
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 21  

1232   2            {
1233   3              if(fVerifyServerCammand() && UART2_buffer[9] == 'H')  //53 56 B1 B2 B3 B4 B5 B6 0C 48 05 32
1234   3              {
1235   4                StepCommWifi = GET_GAIN;
1236   4              }
1237   3              else
1238   3              {
1239   4                StepCommWifi = SERVER_HAND;
1240   4              }
1241   3            }
1242   2            else if(Uart2NoRecTime >= 300) 
1243   2            {
1244   3              StepCommWifi = SERVER_HAND;
1245   3            }
1246   2          break;
1247   2            
1248   2          case GET_GAIN_ACK:              
1249   2            if(REC_WIFI_DATA) 
1250   2            {
1251   3              if(UART2_buffer[2] == 'K' && UART2_buffer[3] == 22 )    // check dianwen K
1252   3              {
1253   4                for(i=0;i<18;i++){
1254   5                  GAIN_SETTING[i] = UART2_buffer[i+4];
1255   5                }
1256   4                fSend_gain_res_debug();         
1257   4                StepCommWifi = WIFI_GAIN_SET;
1258   4                bCommandResult = 0;
1259   4                bServer_Cmd_Ack = 0;
1260   4              }
1261   3            } 
1262   2            else if(Uart2NoRecTime >= 300) {
1263   3              bCommandResult = 0;
1264   3              fSend_gain_res();
1265   3              StepCommWifi = WIFI_IDLE;     // 30s 从数据库得不到回答，则跳过Gain设置，发送报告后，正常出力
1266   3            }
1267   2          
1268   2          break;
1269   2            
1270   2          case WIFI_GAIN_SET_ACK:
1271   2            if(bServer_Cmd_Ack){
1272   3              fSend_gain_res();
1273   3            }     
1274   2            StepCommWifi = WIFI_IDLE;       
1275   2          break;
1276   2            
1277   2          // wifi receive
1278   2          // As long as the command is received, no matter what the status is Enter send mode 
1279   2            
1280   2          case WIFI_IDLE:             //only wait for receive server command
1281   2            if(REC_WIFI_DATA) 
1282   2            {
1283   3              if(fVerifyServerCammand() && UART2_buffer[8] == 0x0E)   //check frame and frame length, 14 bytes for se
             -rver command
1284   3              {
1285   4                ServerCommand = UART2_buffer[9];
1286   4                ReplyTime = UART2_buffer[10];           //reply until this time count down
1287   4                ReplayLen = UART2_buffer[11];           //minimum length of reply   
1288   4                ReplayServerCount = ReplyTime * 10;
1289   4                
1290   4                afterRevServerCommand();             //add 2022-2-12
1291   4                //StepCommWifi = REC_SERVER_COMMAND;      //turn to command mode  //del 2022-2-12
1292   4              }
C51 COMPILER V9.59.0.0   WIFI                                                              06/05/2023 01:12:43 PAGE 22  

1293   3              
1294   3              fClean_RecWIFI_Buf();  // add 2022-2-12
1295   3            } 
1296   2            else if(Uart2NoRecTime >= 100)  fClean_RecWIFI_Buf();
1297   2          
1298   2          break;
1299   2            
1300   2        }
1301   1      }
1302              
1303          
1304          //unsigned char AscToHex(unsigned char aHex)
1305          //  {
1306          //    if((aHex>=0)&&(aHex<=9))
1307          //    aHex += 0x30;
1308          //    else if((aHex>=10)&&(aHex<=15))//A-F
1309          //    aHex += 0x37;
1310          //    else aHex = 0xff;
1311          //    return Hex;
1312          //  }
1313          
1314          unsigned char HexToAsc(unsigned char aChar)
1315          {
1316   1        if((aChar>=0x30)&&(aChar<=0x39))
1317   1        aChar -= 0x30;
1318   1        else if((aChar>=0x41)&&(aChar<=0x46))//capital
1319   1        aChar -= 0x37;
1320   1        else if((aChar>=0x61)&&(aChar<=0x66))//small
1321   1        aChar -= 0x57;
1322   1        else aChar = 0xff;
1323   1        return aChar;
1324   1      }   
1325            
1326          unsigned char IntegrateAscToHex(unsigned char High_aChar,unsigned char Low_aChar)
1327          {
1328   1        unsigned char Hex;
1329   1        Hex = (HexToAsc(High_aChar) << 4) + HexToAsc(Low_aChar);
1330   1        return Hex;
1331   1      } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4856    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    759    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
